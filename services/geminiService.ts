import { GoogleGenAI, Modality, GenerateContentResponse } from "@google/genai";

export const generateImage = async (
    prompt: string, 
    images: { base64: string; mimeType: string }[],
    aspectRatio: string,
    chatHistory: any[]
): Promise<GenerateContentResponse> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const userParts: any[] = [];

  for (const image of images) {
    userParts.push({
      inlineData: {
        data: image.base64,
        mimeType: image.mimeType,
      },
    });
  }
  
  const fullPrompt = `${prompt}\n\n(Generate in ${aspectRatio} aspect ratio)`;
  userParts.push({ text: fullPrompt });

  const contents = [...chatHistory, { role: 'user', parts: userParts }];

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: contents,
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });
    
    const hasImage = response.candidates?.[0]?.content?.parts?.some(p => p.inlineData);
    if (!hasImage) {
        throw new Error("No image was generated by the API.");
    }
    
    return response;
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    throw new Error("Failed to generate image from the API.");
  }
};

export const removeBackgroundImage = async (
  imageUrl: string
): Promise<GenerateContentResponse> => {
  if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable is not set.");
  }
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  const mimeTypeMatch = imageUrl.match(/data:(image\/[^;]+);base64,/);
  if (!mimeTypeMatch) {
    throw new Error("Invalid image data URL.");
  }
  const mimeType = mimeTypeMatch[1];
  const base64Data = imageUrl.split(',')[1];

  const contents = {
    parts: [
      {
        inlineData: {
          data: base64Data,
          mimeType: mimeType,
        },
      },
      {
        text: 'Remove the background from this image, making the background transparent.',
      },
    ],
  };

  try {
    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: contents,
      config: {
        responseModalities: [Modality.IMAGE],
      },
    });

    const hasImage = response.candidates?.[0]?.content?.parts?.some(p => p.inlineData);
    if (!hasImage) {
        throw new Error("No image was returned by the API after background removal request.");
    }
    
    return response;
  } catch (error) {
    console.error("Error calling Gemini API for background removal:", error);
    throw new Error("Failed to remove background using the API.");
  }
};